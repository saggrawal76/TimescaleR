% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query.R
\name{interpolate}
\alias{interpolate}
\title{Interpolate time series data to regular intervals}
\usage{
interpolate(
  conn = NULL,
  table_name,
  value_column,
  time_column,
  interval = "1 hour",
  where_clause = NULL,
  debug = FALSE
)
}
\arguments{
\item{conn}{Database connection object (optional, uses global connection if NULL)}

\item{table_name}{Name of the table}

\item{value_column}{Name of the value column to interpolate}

\item{time_column}{Name of the time column}

\item{interval}{Time interval for interpolation (e.g., '1 hour', '30 minutes')}

\item{where_clause}{Optional WHERE clause}

\item{debug}{Enable debug messages (optional, default FALSE)}
}
\value{
Interpolated time series as a data frame
}
\description{
Interpolate time series data to regular intervals
}
\examples{
\dontrun{
# Using global connection
init_connection(
  host = "localhost", 
  port = 5432, 
  db = "testdb", 
  user = "testuser", 
  pass = "testpass", 
  schema = "public"
)

# Interpolate temperature readings to hourly intervals
hourly_temps <- interpolate(
  table_name = "sensor_data",
  value_column = "temperature",
  time_column = "timestamp",
  interval = "1 hour"
)

# Interpolate with a filter
filtered_data <- interpolate(
  table_name = "sensor_data",
  value_column = "humidity",
  time_column = "timestamp",
  interval = "30 minutes", 
  where_clause = "device_id = 'dev001'"
)

# Or with explicit connection
conn <- get_connection()
# Interpolate with global connection
daily_data <- interpolate(
  conn,
  "metrics",
  "value",
  "time",
  "1 day"
)
}
}
