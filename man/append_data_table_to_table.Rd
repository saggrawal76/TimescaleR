% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tables.R
\name{append_data_table_to_table}
\alias{append_data_table_to_table}
\title{Append data.table to an Existing Table}
\usage{
append_data_table_to_table(
  data_table,
  table_name,
  conn = NULL,
  schema = NULL,
  on_conflict = "do nothing"
)
}
\arguments{
\item{data_table}{data.table object containing the data}

\item{table_name}{Name of the target table}

\item{conn}{Database connection object (optional if global connection is initialized)}

\item{schema}{Schema name (optional)}

\item{on_conflict}{Action on conflict (default: "do nothing")}
}
\value{
Number of rows inserted
}
\description{
Adds new rows from a data.table to an existing table in TimescaleDB.
This is useful for incrementally adding new data without recreating the entire table.
}
\examples{
\dontrun{
# Create a new data.table with data to append
new_data <- data.table::data.table(
  time = seq(as.POSIXct("2023-05-01"), by = "1 hour", length.out = 24),
  value = rnorm(24),
  category = rep(c("A", "B"), each = 12)
)

# Using global connection with required arguments first
init_connection(
  host = "localhost", port = 5432,
  db = "testdb", user = "testuser", pass = "testpass"
)

# Append data with required arguments first
rows_added <- append_data_table_to_table(new_data, "sensor_readings")

close_connection()

# Using explicit connection as optional parameter
config <- configure_timescale(
  host = "localhost", port = 5432, 
  db = "testdb", user = "testuser", pass = "testpass"
)
conn <- connect_to_db(config)

# Append to an existing table with explicit connection
rows_added <- append_data_table_to_table(
  new_data,
  "sensor_readings",
  conn
)

disconnect_from_db(conn)
}
}
