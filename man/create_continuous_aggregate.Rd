% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/continuous_aggregates.R
\name{create_continuous_aggregate}
\alias{create_continuous_aggregate}
\title{Create a continuous aggregate view}
\usage{
create_continuous_aggregate(
  conn = NULL,
  view_name,
  table_name,
  time_column,
  interval,
  select_expr,
  where_clause = NULL,
  group_by = NULL,
  having_clause = NULL,
  with_data = TRUE,
  materialized_only = FALSE,
  create_materialized_view = FALSE,
  debug = FALSE
)
}
\arguments{
\item{conn}{Database connection object (optional, uses global connection if NULL)}

\item{view_name}{The name of the continuous aggregate view to create}

\item{table_name}{The source hypertable name}

\item{time_column}{The name of the time column in the hypertable}

\item{interval}{The time bucket interval (e.g., '1 hour', '1 day')}

\item{select_expr}{The SQL expression for the SELECT statement (required)}

\item{where_clause}{Optional WHERE clause to filter source data}

\item{group_by}{Additional GROUP BY columns (time bucket is automatically included)}

\item{having_clause}{Optional HAVING clause for filtering aggregated data}

\item{with_data}{Whether to populate the view with data on creation (TRUE) or create an empty view (FALSE)}

\item{materialized_only}{Whether to make the view materialized only}

\item{create_materialized_view}{Force create a standard materialized view instead of continuous aggregate}

\item{debug}{Enable debug messages (optional, default FALSE)}
}
\value{
TRUE if the view was created successfully
}
\description{
Creates a continuous aggregate view in TimescaleDB which automatically maintains
a materialized view of an aggregate query on a hypertable. This is useful for
efficiently computing and retrieving aggregate data over time intervals.
}
\examples{
\dontrun{
# Initialize connection
init_connection(
  host = "localhost", 
  port = 5432, 
  db = "testdb", 
  user = "testuser", 
  pass = "testpass", 
  schema = "public"
)

# Using global connection
create_continuous_aggregate(
  view_name = "metrics_hourly",
  table_name = "metrics",
  time_column = "timestamp",
  interval = '1 hour',
  select_expr = "time_bucket('1 hour', timestamp) AS hour, 
                 sensor_id, 
                 AVG(temperature) AS avg_temp,
                 MAX(temperature) AS max_temp"
)

# Or with explicit connection
conn <- get_connection()
create_continuous_aggregate(
  conn,
  view_name = "metrics_daily",
  table_name = "metrics",
  time_column = "timestamp",
  interval = '1 day',
  select_expr = "time_bucket('1 day', timestamp) AS day, 
                 sensor_id, 
                 AVG(temperature) AS avg_temp",
  where_clause = "temperature > 0"
)
}
}
