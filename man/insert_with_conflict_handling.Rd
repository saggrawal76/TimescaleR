% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table_utils.R
\name{insert_with_conflict_handling}
\alias{insert_with_conflict_handling}
\title{Insert data with conflict handling}
\usage{
insert_with_conflict_handling(
  conn = NULL,
  table_name,
  data,
  conflict_target,
  conflict_action = "do nothing",
  debug = FALSE
)
}
\arguments{
\item{conn}{Database connection object (optional, uses global connection if NULL)}

\item{table_name}{Name of the table}

\item{data}{A data frame to insert. Each row represents a record.}

\item{conflict_target}{Column(s) to check for conflicts, as a string or vector}

\item{conflict_action}{Action to take on conflict (default: "do nothing").
Can also be "DO UPDATE SET col1 = EXCLUDED.col1, ..." to update specific columns.}

\item{debug}{Enable debug messages (optional, default FALSE)}
}
\value{
Number of rows processed for insertion
}
\description{
Inserts data into a database table with support for handling conflicts.
This function allows specifying the conflict resolution strategy when
unique or primary key constraints would be violated.
}
\examples{
\dontrun{
# Using global connection
init_connection(
  host = "localhost", 
  port = 5432, 
  db = "testdb", 
  user = "testuser", 
  pass = "testpass", 
  schema = "public"
)

# Single row insertion
data <- data.frame(id = 1, value = 42)
insert_with_conflict_handling(
  table_name = "my_table", 
  data = data, 
  conflict_target = "id"
)

# Multi-row insertion
data <- data.frame(id = 1:5, value = rnorm(5))
insert_with_conflict_handling(
  table_name = "my_table", 
  data = data, 
  conflict_target = "id"
)
}
}
