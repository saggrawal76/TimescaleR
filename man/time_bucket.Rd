% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query.R
\name{time_bucket}
\alias{time_bucket}
\title{Time bucket query}
\usage{
time_bucket(
  table_name,
  time_column,
  bucket_interval = NULL,
  bucket_width = NULL,
  value_column = NULL,
  aggregates = NULL,
  group_by = NULL,
  where_clause = NULL,
  auto_reconnect = TRUE
)
}
\arguments{
\item{table_name}{Name of the table}

\item{time_column}{Name of the time column}

\item{bucket_interval}{Interval for bucketing (e.g., '1 hour', '1 day')}

\item{bucket_width}{Alternative name for bucket_interval (for backward compatibility)}

\item{value_column}{Name of the value column (optional)}

\item{aggregates}{Custom aggregation expressions (e.g., "avg(value) as avg_value, count(*) as count")}

\item{group_by}{Additional columns to group by (optional)}

\item{where_clause}{WHERE clause (optional)}

\item{auto_reconnect}{Whether to attempt reconnection if the connection is lost (default: TRUE)}
}
\value{
Query results as a data frame with time buckets and aggregated values
}
\description{
Executes a TimescaleDB time_bucket query to aggregate time series data into regular intervals.
This is one of the core time-series operations in TimescaleDB.
Uses the global database connection initialized with init_connection().
}
\examples{
\dontrun{
# Initialize global connection
init_connection(
  host = "localhost", port = 5432,
  db = "testdb", user = "testuser", pass = "testpass"
)

# Simple time bucket query - hourly average temperature
result <- time_bucket(
  table_name = "weather_data",
  time_column = "timestamp",
  bucket_interval = "1 hour",
  value_column = "temperature"
)

# Time bucket with custom aggregates
result <- time_bucket(
  table_name = "sensor_data",
  time_column = "time",
  bucket_width = "30 minutes",
  aggregates = "avg(temperature) as avg_temp, max(humidity) as max_humidity",
  where_clause = "sensor_id = 'ABC123' AND time > '2023-01-01'"
)

# Time bucket with grouping
result <- time_bucket(
  table_name = "metrics",
  time_column = "timestamp",
  bucket_interval = "1 day",
  value_column = "value",
  group_by = c("device_id", "metric_type")
)

# Always close the connection when done
close_connection()
}
}
